package interview.amazon_JST_2024.design;

public class CountHotSearchWords {

    /**
     * 系统设计：某app的搜索框，用户会输入搜索词进行搜索，这个搜索接口的qps非常高，搜索词的数量是千万级别，要求以天为维度统计每个搜索词出现的次数，可以按天查询每个搜索词出现的次数，比如前7天，前30天等。
     *
     * 为了设计一个能够处理高QPS搜索请求并能够统计每个搜索词每天出现次数的系统，我们需要考虑如下几个关键点：
     *
     * ### 1. 数据收集和流处理
     * **日志收集**：
     * - 使用高性能的日志收集系统（如Fluentd、Logstash）来捕获实时搜索词。
     * - 将日志发送到消息队列（如Kafka）进行异步处理。
     *
     * **流处理**：
     * - 使用流处理框架（如Apache Flink、Apache Storm或Apache Kafka Streams）来实时读取消息队列中的搜索词日志。
     * - 在流处理中对搜索词进行预聚合，例如统计每个搜索词的出现次数。
     *
     * ### 2. 数据存储
     * **实时数据库/缓存**：
     * - 使用支持高并发写入和读取的数据库（如Redis、Cassandra）存储实时统计数据。
     * - 按天维护搜索词的计数器，例如使用Redis的Sorted Set或Cassandra的Counter列。
     *
     * **长期存储**：
     * - 将每天的聚合数据存储到分布式列式存储数据库（如Apache HBase、Google Bigtable）或时间序列数据库（如InfluxDB）。
     * - 存储结构设计为以日期为行键，搜索词为列键，以便于按天查询。
     *
     * ### 3. 数据查询
     * - 提供一个服务层，用于处理来自前端或其他服务的查询请求。
     * - 查询服务根据请求的日期范围从实时数据库或长期存储中检索统计数据。
     * - 如果查询跨越多天，则需要在服务层进行数据聚合。
     *
     * ### 4. 可扩展性和高可用性
     * - 通过分片和复制提高数据存储的可扩展性和高可用性。
     * - 消息队列、流处理和数据库层都应设计为可水平扩展，以处理日益增长的数据和请求。
     *
     * ### 5. 系统架构概览
     * - **前端**：用户通过app的搜索框发起搜索请求。
     * - **应用层**：处理搜索请求，并将搜索词发送到日志收集系统。
     * - **日志收集**：收集搜索词，并将其发布到消息队列。
     * - **消息队列**：作为缓冲层，确保流处理系统可以平滑处理请求。
     * - **流处理**：实时处理搜索词数据，并执行预聚合。
     * - **实时数据库/缓存**：存储实时统计数据。
     * - **长期存储**：存储历史统计数据。
     * - **查询服务**：处理统计数据的查询请求，返回给前端。
     *
     * ### 6. 监控和运维
     * - 监控整个流程的性能，包括搜索接口的响应时间、消息队列的长度、数据库的响应时间和负载。
     * - 实施数据备份和灾难恢复计划，确保数据的安全性。
     * - 定期对系统进行压力测试和性能优化。
     *
     * 通过上述设计，系统能够处理高QPS的搜索请求，实时更新搜索词的统计数据，并支持按天查询每个搜索词的出现次数。
     */
}
